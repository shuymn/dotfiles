# tmux
function is_exists() { type "$1" >/dev/null 2>&1; return $?; }
function is_osx() { [[ $OSTYPE == darwin* ]]; }
function is_screen_running() { [ ! -z "$STY" ]; }
function is_tmux_runnning() { [ ! -z "$TMUX" ]; }
function is_screen_or_tmux_running() { is_screen_running || is_tmux_runnning; }
function shell_has_started_interactively() { [ ! -z "$PS1" ]; }
function is_ssh_running() { [ ! -z "$SSH_CONECTION" ]; }

function tmux_automatically_attach_session()
{
  if is_screen_or_tmux_running; then
    ! is_exists 'tmux' && return 1

    if is_tmux_runnning; then
      echo "${fg_bold[yellow]}Hello, $(whoami).${reset_color}"
    elif is_screen_running; then
      echo "This is on screen."
    fi
  else
    if shell_has_started_interactively && ! is_ssh_running; then
      if ! is_exists 'tmux'; then
        echo 'Error: tmux command not found' 2>&1
        return 1
      fi

      if tmux has-session >/dev/null 2>&1 && tmux list-sessions | grep -qE '.*]$'; then
        # detached session exists
        tmux list-sessions
        echo -n "Tmux: attach? (y/N/num) "
        read
        if [[ "$REPLY" =~ ^[Yy]$ ]] || [[ "$REPLY" == '' ]]; then
          tmux attach-session
          if [ $? -eq 0 ]; then
            echo "$(tmux -V) attached session"
            return 0
          fi
        elif [[ "$REPLY" =~ ^[0-9]+$ ]]; then
          tmux attach -t "$REPLY"
          if [ $? -eq 0 ]; then
            echo "$(tmux -V) attached session"
            return 0
          fi
        fi
      fi

      if is_osx && is_exists 'reattach-to-user-namespace'; then
        # on OS X force tmux's default command
        # to spawn a shell in the user's namespace
        tmux_config=$(cat $HOME/.tmux.conf <(echo 'set-option -g default-command "reattach-to-user-namespace -l $SHELL"'))
        tmux -f <(echo "$tmux_config") new-session && echo "$(tmux -V) created new session supported OS X"
      else
        tmux new-session && echo "tmux created new session"
      fi
    fi
  fi
}

tmux_automatically_attach_session

# alias
alias ls='ls -GF'
alias gomi='gmv -f --backup=numbered --target-directory ~/.Trash'
alias jman='LANG=ja_JP.UTF-8 man'
alias eman='LANG=C man'

# macvimのvimをvimコマンドで使う
MVIM_PATH='/Applications/MacVim.app/Contents/MacOS/Vim'
if [ -f ${MVIM_PATH} ]; then
  alias vi='env LANG=ja_JP.UTF-8 '"${MVIM_PATH}"' '"$@"
  alias vim='env LANG=ja_JP.UTF-8 '"${MVIM_PATH}"' '"$@"
fi

# emacsが使えたらGUIとCUIを個別に呼び出せるようにする
if type "emacs" > /dev/null 2>&1; then
  alias e='emacs'
  alias ce='emacs -nw'
fi

# cdのあとにlsする
function chpwd() { ls }

# export
## path
IMGMAG_PATH='/usr/local/opt/imagemagick@6/bin'
ANYENV_PATH="${HOME}"'/.anyenv'
DBOX_PATH="${HOME}"'/Storage/Dropbox/bin'
OPENSSL_PATH='/usr/local/opt/openssl/bin'
LIBXML2_PATH='/usr/local/opt/libxml2/bin'

if [ -e ${ANYENV_PATH} ]; then
  export PATH="${ANYENV_PATH}/bin:$PATH"
  eval "$(anyenv init -)"
fi

[ -e ${DBOX_PATH} ] && export PATH="${DBOX_PATH}:$PATH" # original commands
[ -e ${IMGMAG_PATH} ] && export PATH="${IMGMAG_PATH}:$PATH"
[ -e ${OPENSSL_PATH} ] && export PATH="${OPENSSL_PATH}:$PATH"
[ -e ${LIBXML2_PATH} ] && export PATH="${LIBXML2_PATH}:$PATH"

## neovim
if type "nvim" > /dev/null 2>&1; then
  export XDG_CONFIG_HOME="$HOME/.config"
fi

# peco
# http://qiita.com/b4b4r07/items/8db0257d2e6f6b19ecb9
peco-select-history()
{
  if type "peco" >/dev/null 2>&1; then
    BUFFER=$(history 1 | sort -k1,1nr | perl -ne 'BEGIN { my @lines = (); } s/^\s*\d+\s*//; $in=$_; if (!(grep {$in eq $_} @lines)) { push(@lines, $in); print $in; }' | peco --query "$LBUFFER")
    CURSOR=${#BUFFER}
    zle accept-line
    zle clear-screen
  else
    autoload -Uz is-at-least
    if is-at-least 4.3.9; then
      zle -la history-incremental-pattern-search-backward && bindkey "^r" history-incremental-pattern-search-backward
    else
      history-incremental-search-backward
    fi
  fi
}

# 2. 作ったシェル関数をウィジェットに登録する
zle -N peco-select-history

# 3. キーへ割り当てる（任意）
bindkey '^r' peco-select-history

[ -f /usr/local/etc/profile.d/autojump.sh ] && . /usr/local/etc/profile.d/autojump.sh ]
